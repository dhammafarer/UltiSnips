# component
snippet comp "react component"
import React from 'react'

export default class $1 extends React.Component {
	static propTypes = {
		$2: React.PropTypes.${3:object}.isRequired
	}

	static defaultProps = {
		$2: $4
	}

	render () {
		return (
			${0}
		)
	}
}
endsnippet

snippet comp-sc "shallow component"
import React from 'react'
import shallowCompare from 'react-addons-shallow-compare'

class ${1:} extends React.Component {
	shouldComponentUpdate (nextProps, nextState) {
		return shallowCompare(this, nextProps, nextState)
	}
	render () {
		return (
			${0}
		)
	}
}

export default $1
endsnippet

snippet compred "redux component"
import React, {PropTypes} from 'react'
import {bindActionCreators} from 'redux'
import {connect} from 'react-redux'
import * as ${4:} from '../../actions/$4'

export class ${1:} extends React.Component {
	render () {
		return (
			${0}
		)
	}
}

$1.propTypes = {
	${2:}: PropTypes.${3:object}.isRequired,
	actions: PropTypes.object.isRequired
}

function mapStateToProps (state, ownProps) {
	return {
	$2: state.$2
	}
}

function mapDispatchToProps (dispatch) {
	return {
		actions: bindActionCreators($4, dispatch)
	}
}

export default connect(mapStateToProps, mapDispatchToProps)($1)
endsnippet

snippet stfc "stateless functional component"
import React, {PropTypes} from 'react'

$1.propTypes = {
	${2}: PropTypes.${3:string}.isRequired
}

function $1 (${4}) {
	return (
		${0}
	)
}


export default $1
endsnippet

snippet con "react component constructor"
constructor (props) {
	super(props)
	${0}
}
endsnippet

snippet bnd "bind method to this"
this.${1:} = this.$1.bind(this)
endsnippet

## lifecycle
snippet mount "react componentDidMount"
componentDidMount () {
	${0}
}
endsnippet

snippet unmount "React componentWillUnmount"
componentWillUnmount () {
	${0}
}
endsnippet

snippet recprops "React componentWillReceiveProps"
componentWillReceiveProps (nextProps) {
	if (this.props.$1.$2 !== nextProps.$1.$2) {
		this.setState({$1: Object.assign({}, nextProps.$1)})
	}
}
endsnippet

snippet pty "React set props types"
$1.propTypes = {
	${2:}: PropTypes.${3:object}.isRequired
}
endsnippet

# JSX
snippet cn "className"
className="${0}"
endsnippet

snippet t "jsx tag"
<${1:div}>
	$0
</${1/(\w+).*/$1/}>
endsnippet

snippet ts "self-closing tag" b
<$1
	$2={$3}/>
endsnippet
