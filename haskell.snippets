snippet mod "module where" b
module `!p snip.rv = re.sub(r'\.hs$', '', fn)` where

$0
endsnippet

snippet d "function definition" b
$1 :: $2
$1${3:} = ${4:undefined}
endsnippet

snippet l "lambda" w
(\\$1 -> $2)
endsnippet

snippet if "if then else" b
if $1
then $2
else $3
endsnippet

snippet ca "case _ of" w
case $1 of
	${2:True} -> $3
	${4:False} -> $5
endsnippet

snippet com "comprehension"
[ $1 | $2 <- $3 ]
endsnippet

# infix operators
snippet m "<$>" w
<$> $1
endsnippet

snippet a "<*>" w
<*> $1
endsnippet

snippet b ">>=" w
>>= $1
endsnippet

snippet bf "=<<" w
=<< $1
endsnippet

snippet mc ">=>" w
>=> $1
endsnippet

# symbols
snippet f "->" w
-> $1
endsnippet

snippet fb "<-" w
<- $1
endsnippet

snippet fa "=>" w
=> $1
endsnippet

snippet pp "++" w
++ $1
endsnippet

# ADT
snippet nt "newtype" b
newtype $1 = $2
endsnippet

# pragmas
snippet prag "pragma" b
{-# LANGUAGE $1 #-}
endsnippet

# comments
snippet c "comment" b
{-# $0 #-}
endsnippet

# imports
snippet i "import" b
import $1
endsnippet

snippet iq "import" b
import qualified $1
endsnippet

snippet id "import Data." b
import Data.$1
endsnippet

snippet idc "import Data.Char" b
import Data.Char
endsnippet

snippet idl "import Data.List" b
import Data.List
endsnippet

snippet idm "import Data.Monoid" b
import Data.Monoid
endsnippet

snippet ic "import Control." b
import Control.$1
endsnippet

snippet ica "import Control.Applicative" b
import Control.Applicative
endsnippet

snippet icm "import Control.Monad" b
import Control.Monad
endsnippet

snippet is "import System." b
import System.$1
endsnippet

# functions
snippet psl "putStrLn" w
putStrLn $0
endsnippet

# Types Constructors
snippet S "String" w
String
endsnippet

snippet C "Char" w
Char
endsnippet

snippet B "Bool" w
Bool
endsnippet

snippet I "Int" w
Int
endsnippet

snippet In "Integer" w
Integer
endsnippet

snippet D "Double" w
Double
endsnippet
