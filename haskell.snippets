snippet mod "module where" b
module $1 where
endsnippet

snippet d "function definition" b
$1 :: $2
$1${3:} = ${4:undefined}
endsnippet

snippet l "lambda" w
(\\$1 -> $2)
endsnippet

snippet if "if then else" b
if $1
then $2
else $3
endsnippet

snippet ca "case _ of" w
case $1 of
	${2:True} -> $3
	${4:False} -> $5
endsnippet

snippet com "comprehension"
[ $1 | $2 <- $3 ]
endsnippet

# infix operators
snippet m "<$>"
<$> $1
endsnippet

snippet a "<*>"
<*> $1
endsnippet

snippet b ">>="
<*> $1
endsnippet

snippet bf "=<<"
=<< $1
endsnippet

snippet bf ">=>"
>=> $1
endsnippet

# symbols
snippet f "->"
-> $1
endsnippet

snippet ff "<-"
<- $1
endsnippet

snippet fa "=>"
=> $1
endsnippet

# ADT
snippet nt "newtype" b
newtype $1 = $2
endsnippet

# pragmas
snippet prag "pragma" b
{-# LANGUAGE $1  #-}
endsnippet
